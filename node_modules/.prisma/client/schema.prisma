generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  name                String
  passwordHash        String               @map("password_hash")
  isEmailVerified     Boolean              @default(false) @map("is_email_verified")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at")
  mentalHealthMetrics MentalHealthMetric[]
  forumPosts          ForumPost[]
  forumComments       ForumComment[]
  preferences         UserPreference?
  gardenElements      GardenElement[]
  breathingSessions   BreathingSession[]
  journalEntries      JournalEntry[]
  gameProgress        GameProgress[]
  resourceBookmarks   ResourceBookmark[]
  resourceProgress    ResourceProgress[]
  bookmarkedResources Resource[]           @relation("UserBookmarks")
  resourceNotes       ResourceNote[]
  resourceAnalytics   ResourceAnalytics[]

  @@map("users")
}

model MentalHealthMetric {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  metricDate   DateTime @map("metric_date")
  mood         Int
  anxietyLevel Int?     @map("anxiety_level")
  stressLevel  Int?     @map("stress_level")
  energyLevel  Int?     @map("energy_level")
  sleepQuality Int?     @map("sleep_quality")
  gratitude    String?  @db.Text
  notes        String?  @db.Text
  activities   Json?    @default("[]")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mental_health_metrics")
}

model ForumCategory {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  posts ForumPost[]

  @@map("forum_categories")
}

model ForumPost {
  id          Int            @id @default(autoincrement())
  userId      Int?           @map("user_id")
  categoryId  Int?           @map("category_id")
  title       String
  content     String         @db.Text
  isAnonymous Boolean        @default(true) @map("is_anonymous")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @default(now()) @updatedAt @map("updated_at")
  user        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  category    ForumCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments    ForumComment[]

  @@map("forum_posts")
}

model ForumComment {
  id          Int       @id @default(autoincrement())
  postId      Int       @map("post_id")
  userId      Int?      @map("user_id")
  content     String    @db.Text
  isAnonymous Boolean   @default(true) @map("is_anonymous")
  createdAt   DateTime  @default(now()) @map("created_at")
  post        ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("forum_comments")
}

model Resource {
  id          Int                 @id @default(autoincrement())
  title       String
  description String
  type        ResourceType
  content     String?
  url         String?
  category    ResourceCategory
  thumbnail   String?
  duration    Int?
  difficulty  ResourceDifficulty?
  tags        String
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  // Relations
  bookmarkedBy ResourceBookmark[]
  progress     ResourceProgress[]
  notes        ResourceNote[]
  analytics    ResourceAnalytics[]
  users        User[]              @relation("UserBookmarks")

  @@map("resources")
}

model ResourceBookmark {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  resourceId Int      @map("resource_id")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("resource_bookmarks")
}

model ResourceProgress {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int
  progress   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, resourceId])
}

model ResourceNote {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ResourceAnalytics {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int
  eventType  String
  metadata   Json
  timestamp  DateTime @default(now())
}

enum ResourceType {
  ARTICLE
  AUDIO
  VIDEO
  WORKSHEET
  INTERACTIVE
  CHECKLIST
  MEDITATION
  BREATHING
  ASSESSMENT
}

enum ResourceCategory {
  UNDERSTANDING_MENTAL_HEALTH @map("understanding_mental_health")
  COPING_STRATEGIES           @map("coping_strategies")
  CRISIS_SUPPORT              @map("crisis_support")
  DAILY_SELF_CARE             @map("daily_self_care")
  PROFESSIONAL_SUPPORT        @map("professional_support")
  EDUCATIONAL_LIBRARY         @map("educational_library")
}

enum ResourceDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model UserPreference {
  id                      Int      @id @default(autoincrement())
  userId                  Int      @unique @map("user_id")
  privacySetting          String   @default("public") @map("privacy_setting")
  notificationPreferences Json?    @map("notification_preferences")
  languagePreference      String   @default("en") @map("language_preference")
  accessibilityOptions    Json?    @map("accessibility_options")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @default(now()) @updatedAt @map("updated_at")
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model BreathingSession {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  pattern     String
  duration    Int // Duration in seconds
  completed   Boolean  @default(false)
  cycles      Int      @default(0)
  stressLevel Int?     @map("stress_level")
  notes       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("breathing_sessions")
}

enum GardenElementType {
  plant
  tree
  flower
}

enum HealthStatus {
  healthy
  needs_attention @map("needs-attention")
  wilting
}

model GardenElement {
  id              Int               @id @default(autoincrement())
  userId          Int               @map("user_id")
  type            GardenElementType
  name            String
  description     String?           @db.Text
  plantedDate     DateTime          @default(now()) @map("planted_date")
  lastWateredDate DateTime          @default(now()) @map("last_watered_date")
  growthStage     Int               @default(1) @map("growth_stage")
  healthStatus    HealthStatus      @default(healthy) @map("health_status")
  positionX       Int               @map("position_x")
  positionY       Int               @map("position_y")
  moodHistory     Json              @default("[]") @map("mood_history")
  activityHistory Json              @default("[]") @map("activity_history")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("garden_elements")
}

model JournalEntry {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  content   String   @db.Text
  mood      String?
  tags      Json?    @default("[]")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model GameProgress {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  gameType  String   @map("game_type")
  score     Int      @default(0)
  timeSpent Int      @default(0) @map("time_spent")
  completed Boolean  @default(false)
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_progress")
}
