
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  passwordHash: 'passwordHash',
  isEmailVerified: 'isEmailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MentalHealthMetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  metricDate: 'metricDate',
  mood: 'mood',
  anxietyLevel: 'anxietyLevel',
  stressLevel: 'stressLevel',
  energyLevel: 'energyLevel',
  sleepQuality: 'sleepQuality',
  gratitude: 'gratitude',
  notes: 'notes',
  activities: 'activities',
  createdAt: 'createdAt'
};

exports.Prisma.ForumCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ForumPostScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  categoryId: 'categoryId',
  title: 'title',
  content: 'content',
  isAnonymous: 'isAnonymous',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ForumCommentScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  content: 'content',
  isAnonymous: 'isAnonymous',
  createdAt: 'createdAt'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  content: 'content',
  url: 'url',
  category: 'category',
  thumbnail: 'thumbnail',
  duration: 'duration',
  difficulty: 'difficulty',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceBookmarkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resourceId: 'resourceId',
  createdAt: 'createdAt'
};

exports.Prisma.ResourceProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resourceId: 'resourceId',
  progress: 'progress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceNoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resourceId: 'resourceId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResourceAnalyticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  resourceId: 'resourceId',
  eventType: 'eventType',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  privacySetting: 'privacySetting',
  notificationPreferences: 'notificationPreferences',
  languagePreference: 'languagePreference',
  accessibilityOptions: 'accessibilityOptions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BreathingSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pattern: 'pattern',
  duration: 'duration',
  completed: 'completed',
  cycles: 'cycles',
  stressLevel: 'stressLevel',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.GardenElementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  name: 'name',
  description: 'description',
  plantedDate: 'plantedDate',
  lastWateredDate: 'lastWateredDate',
  growthStage: 'growthStage',
  healthStatus: 'healthStatus',
  positionX: 'positionX',
  positionY: 'positionY',
  moodHistory: 'moodHistory',
  activityHistory: 'activityHistory',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JournalEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  mood: 'mood',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameType: 'gameType',
  score: 'score',
  timeSpent: 'timeSpent',
  completed: 'completed',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  name: 'name',
  passwordHash: 'passwordHash'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.MentalHealthMetricOrderByRelevanceFieldEnum = {
  gratitude: 'gratitude',
  notes: 'notes'
};

exports.Prisma.ForumCategoryOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ForumPostOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content'
};

exports.Prisma.ForumCommentOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.ResourceOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  content: 'content',
  url: 'url',
  thumbnail: 'thumbnail',
  tags: 'tags'
};

exports.Prisma.ResourceNoteOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.ResourceAnalyticsOrderByRelevanceFieldEnum = {
  eventType: 'eventType'
};

exports.Prisma.UserPreferenceOrderByRelevanceFieldEnum = {
  privacySetting: 'privacySetting',
  languagePreference: 'languagePreference'
};

exports.Prisma.BreathingSessionOrderByRelevanceFieldEnum = {
  pattern: 'pattern',
  notes: 'notes'
};

exports.Prisma.GardenElementOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.JournalEntryOrderByRelevanceFieldEnum = {
  content: 'content',
  mood: 'mood'
};

exports.Prisma.GameProgressOrderByRelevanceFieldEnum = {
  gameType: 'gameType'
};
exports.ResourceType = exports.$Enums.ResourceType = {
  ARTICLE: 'ARTICLE',
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  WORKSHEET: 'WORKSHEET',
  INTERACTIVE: 'INTERACTIVE',
  CHECKLIST: 'CHECKLIST',
  MEDITATION: 'MEDITATION',
  BREATHING: 'BREATHING',
  ASSESSMENT: 'ASSESSMENT'
};

exports.ResourceCategory = exports.$Enums.ResourceCategory = {
  UNDERSTANDING_MENTAL_HEALTH: 'UNDERSTANDING_MENTAL_HEALTH',
  COPING_STRATEGIES: 'COPING_STRATEGIES',
  CRISIS_SUPPORT: 'CRISIS_SUPPORT',
  DAILY_SELF_CARE: 'DAILY_SELF_CARE',
  PROFESSIONAL_SUPPORT: 'PROFESSIONAL_SUPPORT',
  EDUCATIONAL_LIBRARY: 'EDUCATIONAL_LIBRARY'
};

exports.ResourceDifficulty = exports.$Enums.ResourceDifficulty = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.GardenElementType = exports.$Enums.GardenElementType = {
  plant: 'plant',
  tree: 'tree',
  flower: 'flower'
};

exports.HealthStatus = exports.$Enums.HealthStatus = {
  healthy: 'healthy',
  needs_attention: 'needs_attention',
  wilting: 'wilting'
};

exports.Prisma.ModelName = {
  User: 'User',
  MentalHealthMetric: 'MentalHealthMetric',
  ForumCategory: 'ForumCategory',
  ForumPost: 'ForumPost',
  ForumComment: 'ForumComment',
  Resource: 'Resource',
  ResourceBookmark: 'ResourceBookmark',
  ResourceProgress: 'ResourceProgress',
  ResourceNote: 'ResourceNote',
  ResourceAnalytics: 'ResourceAnalytics',
  UserPreference: 'UserPreference',
  BreathingSession: 'BreathingSession',
  GardenElement: 'GardenElement',
  JournalEntry: 'JournalEntry',
  GameProgress: 'GameProgress'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
